// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview A repair recommendation AI agent.
 *
 * - recommendRepairs - A function that recommends repairs.
 * - RecommendRepairsInput - The input type for the recommendRepairs function.
 * - RecommendRepairsOutput - The return type for the recommendRepairs function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const RecommendRepairsInputSchema = z.object({
  conditionData: z.string().describe('The condition data of the asset.'),
  assetType: z.string().describe('The type of the asset.'),
  userDefinedRules: z.string().describe('The user-defined rules for repair recommendations.'),
});
export type RecommendRepairsInput = z.infer<typeof RecommendRepairsInputSchema>;

const RecommendRepairsOutputSchema = z.object({
  recommendations: z.string().describe('The recommended repairs or replacements.'),
  reasoning: z.string().describe('The reasoning behind the recommendations.'),
});
export type RecommendRepairsOutput = z.infer<typeof RecommendRepairsOutputSchema>;

export async function recommendRepairs(input: RecommendRepairsInput): Promise<RecommendRepairsOutput> {
  return recommendRepairsFlow(input);
}

const prompt = ai.definePrompt({
  name: 'recommendRepairsPrompt',
  input: {schema: RecommendRepairsInputSchema},
  output: {schema: RecommendRepairsOutputSchema},
  prompt: `You are an AI assistant that recommends repairs or replacements for assets based on their condition, type, and user-defined rules.\n\nCondition Data: {{{conditionData}}}\nAsset Type: {{{assetType}}}\nUser-Defined Rules: {{{userDefinedRules}}}\n\nBased on this information, provide specific repair or replacement recommendations and explain your reasoning. Return your answer in the format prescribed by the output schema.`,}
);

const recommendRepairsFlow = ai.defineFlow(
  {
    name: 'recommendRepairsFlow',
    inputSchema: RecommendRepairsInputSchema,
    outputSchema: RecommendRepairsOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
