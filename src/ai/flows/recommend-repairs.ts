
// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview A repair recommendation AI agent.
 *
 * - recommendRepairs - A function that recommends repairs for a single asset.
 * - recommendRepairsForAllAssets - A function that recommends repairs for a list of assets.
 * - RecommendRepairsInput - The input type for the recommendRepairs function.
 * - RecommendRepairsOutput - The return type for the recommendRepairs function.
 * - RecommendRepairsAllAssetsInput - The input type for the recommendRepairsForAllAssets function.
 * - RecommendRepairsAllAssetsOutput - The return type for the recommendRepairsForAllAssets function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const RecommendRepairsInputSchema = z.object({
  conditionData: z.string().describe('The condition data of the asset.'),
  assetType: z.string().describe('The type of the asset.'),
  userDefinedRules: z.string().describe('The user-defined rules for repair recommendations.'),
});
export type RecommendRepairsInput = z.infer<typeof RecommendRepairsInputSchema>;

const RecommendRepairsOutputSchema = z.object({
  recommendations: z.string().describe('The recommended repairs or replacements.'),
  reasoning: z.string().describe('The reasoning behind the recommendations.'),
});
export type RecommendRepairsOutput = z.infer<typeof RecommendRepairsOutputSchema>;

const AssetSchema = z.object({
  assetId: z.string(),
  address: z.string(),
  yearInstalled: z.number(),
  material: z.enum(['Concrete', 'Polyethylene', 'Fibreglass']),
  setbackFromWaterSource: z.number(),
  setbackFromHouse: z.number(),
  tankBuryDepth: z.number(),
  openingSize: z.number(),
  aboveGroundCollarHeight: z.number(),
  septicSystemType: z.enum(['Cistern', 'Septic Tank']),
  assetSubType: z.enum(['Cistern', 'Pump Out', 'Mound', 'Septic Field', 'Other']),
  siteCondition: z.number(),
  coverCondition: z.number(),
  collarCondition: z.number(),
  interiorCondition: z.number(),
  overallCondition: z.number(),
  fieldNotes: z.string(),
});

const RepairPriceSchema = z.object({
    id: z.string(),
    repairType: z.string(),
    unitPrice: z.number(),
    description: z.string().optional(),
});

const RecommendRepairsAllAssetsInputSchema = z.object({
    assets: z.array(AssetSchema),
    repairPrices: z.array(RepairPriceSchema).describe("A list of available repair types and their unit prices."),
    repairRules: z.string().describe("A string containing user-defined rules for REPAIR recommendations, where each rule is on a new line."),
    lifeRules: z.string().describe("A string containing user-defined rules for REMAINING LIFE estimations, where each rule is on a new line."),
});

export type RecommendRepairsAllAssetsInput = z.infer<typeof RecommendRepairsAllAssetsInputSchema>;

const SingleAssetRecommendationSchema = z.object({
    assetId: z.string(),
    recommendation: z.string().describe('The recommended repair or replacement action. Should be a short summary.'),
    recommendedRepairType: z.string().describe("The specific repair type. This can be from the provided price list or a new one if appropriate. If no specific repair is applicable, return 'None'."),
    estimatedCost: z.number().describe("The estimated cost for the repair. If the repair type is not in the price list, return 0."),
    needsPrice: z.boolean().describe("Set to true if the recommended repair type does not have a price in the provided list, otherwise set to false."),
    estimatedRemainingLife: z.string().describe("An estimate of the remaining life of the asset. It MUST be one of the following values: '0-5 years', '5-10 years', '10-15 years', '15-20 years', or '20-25 years'."),
});

const RecommendRepairsAllAssetsOutputSchema = z.object({
    recommendations: z.array(SingleAssetRecommendationSchema),
});
export type RecommendRepairsAllAssetsOutput = z.infer<typeof RecommendRepairsAllAssetsOutputSchema>;


export async function recommendRepairs(input: RecommendRepairsInput): Promise<RecommendRepairsOutput> {
  return recommendRepairsFlow(input);
}

export async function recommendRepairsForAllAssets(input: RecommendRepairsAllAssetsInput): Promise<RecommendRepairsAllAssetsOutput> {
    return recommendRepairsForAllAssetsFlow(input);
}


const singleAssetPrompt = ai.definePrompt({
  name: 'recommendRepairsPrompt',
  input: {schema: RecommendRepairsInputSchema},
  output: {schema: RecommendRepairsOutputSchema},
  prompt: `You are an AI assistant that recommends repairs or replacements for assets based on their condition, type, and user-defined rules.\n\nCondition Data: {{{conditionData}}}\nAsset Type: {{{assetType}}}\nUser-Defined Rules: {{{userDefinedRules}}}\n\nBased on this information, provide specific repair or replacement recommendations and explain your reasoning. Return your answer in the format prescribed by the output schema.`,}
);

const recommendRepairsFlow = ai.defineFlow(
  {
    name: 'recommendRepairsFlow',
    inputSchema: RecommendRepairsInputSchema,
    outputSchema: RecommendRepairsOutputSchema,
  },
  async input => {
    const {output} = await singleAssetPrompt(input);
    return output!;
  }
);


const allAssetsPrompt = ai.definePrompt({
  name: 'recommendRepairsForAllAssetsPrompt',
  input: { schema: RecommendRepairsAllAssetsInputSchema },
  output: { schema: RecommendRepairsAllAssetsOutputSchema },
  prompt: `You are an AI asset management expert. For each asset provided, you MUST perform two distinct tasks:
1.  Estimate the remaining life.
2.  Recommend a repair.

You must provide a response for every asset.

---
**TASK 1: ESTIMATE REMAINING LIFE (FOR EACH ASSET)**
For each asset, provide an estimate of its remaining useful life.
- First, check if the asset matches any of the "Remaining Life Rules" provided. If a rule matches, you MUST use the life expectancy from that rule.
- If no life rule matches, then base your estimate on its 'Year Installed', all condition scores, 'Material', and system type.
- You MUST choose from one of the following 5-year increment options: "0-5 years", "5-10 years", "10-15 years", "15-20 years", "20-25 years".
- The maximum value is "20-25 years".
- If a full replacement is recommended in Task 2, the remaining life should generally be '0-5 years', unless a life rule specifies otherwise.

---
**TASK 2: RECOMMEND REPAIRS (FOR EACH ASSET)**
After estimating the remaining life, determine the appropriate repair recommendation by following this logic precisely:

1.  **PRIORITY 1: APPLY USER-DEFINED REPAIR RULES.**
    - For each asset, check if its data matches any of the user-defined "Repair Rules" provided below. When comparing text, IGNORE CASE SENSITIVITY (e.g., 'Concrete' should match 'concrete').
    - If an asset's data satisfies a rule's conditions, you MUST use the recommendation from that rule.
    - When a rule matches:
        - Set 'recommendation' to the text provided in the rule.
        - Set 'recommendedRepairType' to the SAME text.
        - Intelligently search the 'Available Repairs and Prices' list for a 'repairType' that addresses the problem described. Be flexible with synonyms (e.g., 'cracked cover' matches 'Lid Replacement').
        - If a confident match is found, set 'estimatedCost' to its 'unitPrice' and 'needsPrice' to false.
        - If you DO NOT find a confident match, set 'estimatedCost' to 0 and 'needsPrice' to true.
    - Once a rule matches, STOP further repair analysis for that asset and use this as its recommendation for Task 2.

2.  **PRIORITY 2: INTELLIGENT MATCHING (ONLY if no repair rule applies).**
    - If no user rule matches an asset, then analyze its 'Field Notes' and other properties.
    - Intelligently search the 'Available Repairs and Prices' list for a 'repairType' that addresses the problem described. Be flexible with synonyms (e.g., 'cracked cover' matches 'Lid Replacement').
    - If a confident match is found:
        - Set 'recommendation' to a short summary (e.g., "Replace damaged lid").
        - Set 'recommendedRepairType' to the exact 'repairType' from the price list.
        - Set 'estimatedCost' to the corresponding 'unitPrice'.
        - Set 'needsPrice' to false.
    - If 'Field Notes' describe a problem but you CANNOT find a matching repair:
        - Set 'recommendation' to describe the needed repair (e.g., "Repair crack in tank").
        - Set 'recommendedRepairType' to a new, descriptive name (e.g., "Tank Crack Repair").
        - Set 'estimatedCost' to 0.
        - Set 'needsPrice' to true.

3.  **PRIORITY 3: GENERAL INSPECTION.**
    - If no rules apply and 'Field Notes' are empty or non-specific (e.g., "OK"), then look at the condition scores.
    - If any condition score is 3 or less, recommend a general inspection.
    - Set 'recommendation' to "General Inspection Recommended".
    - Set 'recommendedRepairType' to "General Inspection".
    - Set 'estimatedCost' to 0 and 'needsPrice' to true.

4.  **PRIORITY 4: NO ACTION NEEDED.**
    - If no rules apply, 'Field Notes' are clear (e.g., "OK", "No issues"), and condition scores are good (4 or 5), then no action is needed.
    - Set 'recommendation' to "No action needed".
    - Set 'recommendedRepairType' to "None".
    - Set 'estimatedCost' to 0 and 'needsPrice' to false.

---
**Remaining Life Rules (Used for Task 1):**
{{#if lifeRules}}
{{{lifeRules}}}
{{else}}
No user-defined life estimation rules provided.
{{/if}}

---
**Repair Rules (Used for Task 2):**
{{#if repairRules}}
{{{repairRules}}}
{{else}}
No user-defined repair rules provided.
{{/if}}

---
**Available Repairs and Prices (Used for Task 2):**
{{#each repairPrices}}
- {{repairType}}: \${{unitPrice}}
{{/each}}

---
**Assets to Analyze:**
{{#each assets}}
- Asset ID: {{assetId}}
  - Address: {{address}}
  - Year Installed: {{yearInstalled}}
  - Material: {{material}}
  - Setback Water (m): {{setbackFromWaterSource}}
  - Setback House (m): {{setbackFromHouse}}
  - Bury Depth (m): {{tankBuryDepth}}
  - Opening Size (m): {{openingSize}}
  - Collar Height (m): {{aboveGroundCollarHeight}}
  - System Type: {{septicSystemType}}
  - Sub-Type: {{assetSubType}}
  - Site Condition: {{siteCondition}}/5
  - Cover Condition: {{coverCondition}}/5
  - Collar Condition: {{collarCondition}}/5
  - Interior Condition: {{interiorCondition}}/5
  - Overall Condition: {{overallCondition}}/5
  - Field Notes: "{{fieldNotes}}"
{{/each}}

Return your answer as a list of recommendations, one for each asset ID, in the format prescribed by the output schema. Ensure all fields in the output schema are populated for every asset.
`,
  config: {
    safetySettings: [
      {
        category: 'HARM_CATEGORY_DANGEROUS_CONTENT',
        threshold: 'BLOCK_NONE',
      },
    ],
  },
});

const recommendRepairsForAllAssetsFlow = ai.defineFlow(
    {
        name: 'recommendRepairsForAllAssetsFlow',
        inputSchema: RecommendRepairsAllAssetsInputSchema,
        outputSchema: RecommendRepairsAllAssetsOutputSchema,
    },
    async (input) => {
        const { output } = await allAssetsPrompt(input);
        return output!;
    }
);
