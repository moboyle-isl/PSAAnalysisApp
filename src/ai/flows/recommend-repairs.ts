
// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview A repair recommendation AI agent.
 *
 * - recommendRepairs - A function that recommends repairs for a single asset.
 * - recommendRepairsForAllAssets - A function that recommends repairs for a list of assets.
 * - RecommendRepairsInput - The input type for the recommendRepairs function.
 * - RecommendRepairsOutput - The return type for the recommendRepairs function.
 * - RecommendRepairsAllAssetsInput - The input type for the recommendRepairsForAllAssets function.
 * - RecommendRepairsAllAssetsOutput - The return type for the recommendRepairsForAllAssets function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const RecommendRepairsInputSchema = z.object({
  conditionData: z.string().describe('The condition data of the asset.'),
  assetType: z.string().describe('The type of the asset.'),
  userDefinedRules: z.string().describe('The user-defined rules for repair recommendations.'),
});
export type RecommendRepairsInput = z.infer<typeof RecommendRepairsInputSchema>;

const RecommendRepairsOutputSchema = z.object({
  recommendations: z.string().describe('The recommended repairs or replacements.'),
  reasoning: z.string().describe('The reasoning behind the recommendations.'),
});
export type RecommendRepairsOutput = z.infer<typeof RecommendRepairsOutputSchema>;

const AssetSchema = z.object({
  assetId: z.string(),
  address: z.string(),
  yearInstalled: z.number(),
  material: z.enum(['Concrete', 'Polyethylene', 'Fibreglass']),
  setbackFromWaterSource: z.number(),
  setbackFromHouse: z.number(),
  tankBuryDepth: z.number(),
  openingSize: z.number(),
  aboveGroundCollarHeight: z.number(),
  septicSystemType: z.enum(['Cistern', 'Septic Tank']),
  assetSubType: z.enum(['Cistern', 'Pump Out', 'Mound', 'Septic Field', 'Other']),
  siteCondition: z.number(),
  coverCondition: z.number(),
  collarCondition: z.number(),
  interiorCondition: z.number(),
  overallCondition: z.number(),
  fieldNotes: z.string(),
});

const RepairPriceSchema = z.object({
    id: z.string(),
    repairType: z.string(),
    unitPrice: z.number(),
});

const RecommendRepairsAllAssetsInputSchema = z.object({
    assets: z.array(AssetSchema),
    repairPrices: z.array(RepairPriceSchema).describe("A list of available repair types and their unit prices."),
    userDefinedRules: z.string().describe('The user-defined rules for repair recommendations.'),
});

export type RecommendRepairsAllAssetsInput = z.infer<typeof RecommendRepairsAllAssetsInputSchema>;

const SingleAssetRecommendationSchema = z.object({
    assetId: z.string(),
    recommendation: z.string().describe('The recommended repair or replacement action. Should be a short summary.'),
    recommendedRepairType: z.string().describe("The specific repair type. This can be from the provided price list or a new one if appropriate. If no specific repair is applicable, return 'None'."),
    estimatedCost: z.number().describe("The estimated cost for the repair. If the repair type is not in the price list, return 0."),
    needsPrice: z.boolean().describe("Set to true if the recommended repair type does not have a price in the provided list, otherwise set to false."),
});

const RecommendRepairsAllAssetsOutputSchema = z.object({
    recommendations: z.array(SingleAssetRecommendationSchema),
});
export type RecommendRepairsAllAssetsOutput = z.infer<typeof RecommendRepairsAllAssetsOutputSchema>;


export async function recommendRepairs(input: RecommendRepairsInput): Promise<RecommendRepairsOutput> {
  return recommendRepairsFlow(input);
}

export async function recommendRepairsForAllAssets(input: RecommendRepairsAllAssetsInput): Promise<RecommendRepairsAllAssetsOutput> {
    return recommendRepairsForAllAssetsFlow(input);
}


const singleAssetPrompt = ai.definePrompt({
  name: 'recommendRepairsPrompt',
  input: {schema: RecommendRepairsInputSchema},
  output: {schema: RecommendRepairsOutputSchema},
  prompt: `You are an AI assistant that recommends repairs or replacements for assets based on their condition, type, and user-defined rules.\n\nCondition Data: {{{conditionData}}}\nAsset Type: {{{assetType}}}\nUser-Defined Rules: {{{userDefinedRules}}}\n\nBased on this information, provide specific repair or replacement recommendations and explain your reasoning. Return your answer in the format prescribed by the output schema.`,}
);

const recommendRepairsFlow = ai.defineFlow(
  {
    name: 'recommendRepairsFlow',
    inputSchema: RecommendRepairsInputSchema,
    outputSchema: RecommendRepairsOutputSchema,
  },
  async input => {
    const {output} = await singleAssetPrompt(input);
    return output!;
  }
);


const allAssetsPrompt = ai.definePrompt({
  name: 'recommendRepairsForAllAssetsPrompt',
  input: { schema: RecommendRepairsAllAssetsInputSchema },
  output: { schema: RecommendRepairsAllAssetsOutputSchema },
  prompt: `You are an AI assistant that recommends repairs or replacements for a list of assets based on their condition, type, and user-defined rules.

You are given a list of available repair types and their costs. Do not invent prices.

Available Repairs and Prices:
{{#each repairPrices}}
- {{repairType}}: \${{unitPrice}}
{{else}}
- No prices provided.
{{/each}}

User-Defined Rules: {{{userDefinedRules}}}

Analyze the following assets and provide a specific repair or replacement recommendation for each one.
- For each asset, determine the most appropriate repair.
- The 'recommendation' field should be a short, human-readable summary of the action (e.g., "Replace pump seal", "Relinish tank").
- If a repair is needed, set 'recommendedRepairType' to the name of the repair.
- Check if the 'recommendedRepairType' exists in the provided price list.
- If it exists, calculate the 'estimatedCost' based on the unit prices and set 'needsPrice' to false.
- If the 'recommendedRepairType' does NOT exist in the price list, you MUST set 'estimatedCost' to 0 and 'needsPrice' to true.
- If no repair is necessary, set 'recommendation' to "No action needed", 'recommendedRepairType' to "None", 'estimatedCost' to 0, and 'needsPrice' to false.

Assets:
{{#each assets}}
- Asset ID: {{assetId}}
- Type: {{septicSystemType}}
- Sub-Type: {{assetSubType}}
- Year Installed: {{yearInstalled}}
- Material: {{material}}
- Site Condition: {{siteCondition}}/5
- Cover Condition: {{coverCondition}}/5
- Collar Condition: {{collarCondition}}/5
- Interior Condition: {{interiorCondition}}/5
- Overall Condition: {{overallCondition}}/5
- Field Notes: "{{fieldNotes}}"
{{/each}}

Return your answer as a list of recommendations, one for each asset ID, in the format prescribed by the output schema.
`,
});

const recommendRepairsForAllAssetsFlow = ai.defineFlow(
    {
        name: 'recommendRepairsForAllAssetsFlow',
        inputSchema: RecommendRepairsAllAssetsInputSchema,
        outputSchema: RecommendRepairsAllAssetsOutputSchema,
    },
    async (input) => {
        const { output } = await allAssetsPrompt(input);
        return output!;
    }
);
